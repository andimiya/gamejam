
<style>

  @-webkit-keyframes wiggle
  {
      0% {-webkit-transform: rotateZ(2deg);}
      50% {-webkit-transform: rotateZ(-2deg);}
      100% {-webkit-transform: rotateZ(2deg);}
  }
  @-moz-keyframes wiggle
  {
      0% {-moz-transform: rotateZ(2deg);}
      50% {-moz-transform: rotateZ(-2deg);}
      100% {-moz-transform: rotateZ(2deg);}
  }
  @-o-keyframes wiggle
  {
      0% {-o-transform: rotateZ(2deg);}
      50% {-o-transform: rotateZ(-2deg);}
      100% {-o-transform: rotateZ(2deg);}
  }
  @keyframes wiggle
  {
      0% {transform: rotateZ(2deg);}
      50% {transform: rotateZ(-2deg);}
      100% {transform: rotateZ(2deg);}
  }

  body {

  }
  #page-container {
    /*border: 10px solid blue;*/
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    height: 700px;
  }
  #left-sidebar-container {
    /*border: 10px solid red;*/
    background-color: #CC6600;
    background-image: url('/assets/big-bear.png');

    background-size: 225px;
    background-repeat: no-repeat;
    background-position: center;
    box-sizing: border-box;
    flex: 0 0 275px;
    display: flex;
    justify-content: center;
  }

  #grid {
    /*border: 10px solid black;*/
    align-self: flex-end;
    padding: 0px 0px 200px 0px;
  }

  #container {
    /*border: 10px solid pink;*/
    background-color: #E67605;
    box-sizing: border-box;
    flex: 0 0 685px;
  }
  #servermessage {
    font-family: 'Nunito', sans-serif;
    font-size: 24px;
    text-align: center;
    padding: 20px 0px 0px 20px;
    -webkit-animation: wiggle 0.7s ease infinite;
    -moz-animation: wiggle 0.7s ease infinite;
    -o-animation: wiggle 0.7s ease infinite;
    animation: wiggle 0.7s ease infinite;
  }
  #message {
    font-family: 'Nunito', sans-serif;
    font-size: 24px;
    text-align: center;
    padding: 20px 0px 20px 0px;

  }
  .gameboard {
    font-family: 'Nunito', sans-serif;
    font-size: 80px;
    text-align: center;


    background-image: url('/assets/grid.png');
    background-repeat: no-repeat;
    background-position: center;
    background-size: 80%;
    vertical-align: middle;

/*    border: 10px solid purple;
*/    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    text-align: center;
    align-items: center;

  }
  .cell {
    /*border: 10px solid brown;*/
    box-sizing: border-box;
    flex: 0 0 33.3333%;
    height: 200px;
    align-self: flex-start;
    line-height: 12rem;

  }

</style>
</head>

<body onload="startGame();">
  <div id="page-container">
    <div id="left-sidebar-container">
      {{!-- <img height="200px" src="/assets/big-bear.png"></img> --}}
      <div id="grid">
      <ul id="messages"></ul>
      <form action="" id="chatForm">
        <input id="m" autocomplete="off" /><button>Send</button>
      </form>
      </div>
    </div>

    <div id="container">
      <div id="servermessage">Messages will go here</div>
      <div class="gameboard">
        <div class="cell" id="cell-1"></div>
        <div class="cell" id="cell-2"></div>
        <div class="cell" id="cell-3"></div>
        <div class="cell" id="cell-4"></div>
        <div class="cell" id="cell-5"></div>
        <div class="cell" id="cell-6"></div>
        <div class="cell" id="cell-7"></div>
        <div class="cell" id="cell-8"></div>
        <div class="cell" id="cell-9"></div>
      </div>
    </div>
  </div>

  <script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>
  <script src="http://code.jquery.com/jquery-1.11.1.js"></script>

  <script>

    var socket = io('http://localhost:3000');
      socket.on('chat', function (data) {
        $('#messages').append(data.message);
      });
        // Create socket handler to receive gamestate update from server
        // update sampleMatrix
        // call the setGrid Function
      $('#chatForm').on('submit', (event) => {
        event.preventDefault();
        socket.emit('chat', { message: $('#m').val()})
        $('#m').val('');
      });

    function startGame(){
      document.turn = "X";
      setMessage("Player " + document.turn + " Plays First");
    }

    function setMessage(msg){
      document.getElementById("servermessage").innerHTML = msg;
    }

    function nextMove(cell) {
      console.log('cell: ', cell);

        switchTurn();
    }

    function switchTurn() {
      if (checkForWinner(document.turn)) {
        console.log('checkForWinner', checkForWinner(document.turn));
        setMessage("Congratulations " + document.turn + " You Win!");
      }
      else if (document.turn === "X"){
        document.turn = "O"
        setMessage("Its " + document.turn + "s Turn")
      }
      else {
        document.turn = "X";
        setMessage("Its " + document.turn + "s Turn")
      }
    }


    function checkForWinner(move) {
      var result = false;

      if (
        checkRow(1, 2, 3, move ) ||
        checkRow(4, 5, 6, move ) ||
        checkRow(7, 8, 9, move ) ||
        checkRow(1, 4, 7, move ) ||
        checkRow(2, 5, 8, move ) ||
        checkRow(3, 6, 9, move ) ||
        checkRow(1, 5, 9, move ) ||
        checkRow(3, 5, 7, move ) )
      {
      result = true;
      }
      return result;
    }

    function checkRow(a, b, c, move) {
      // console.log('a: ', a);
      // console.log('b: ', b);
      // console.log('c: ', c);
      // console.log('move: ', move);
      var result = false;
      if (
        getBox(a) === move &&
        getBox(b) === move &&
        getBox(c) === move ) {
      result = true;
      }
      return result;
    }

    function getBox(id){
      console.log(id, 'id');
      return document.getElementById(`cell-${id}`).innerHTML;
    }

    socket.on('news', function (data) {
      console.log('data from server', data);
      let id = data.cell;
      let cellId = `cell-${id}`
      console.log('cellId: ', cellId);
      let cell = document.getElementById(cellId);
      cell.innerHTML = document.turn;
      document.turn = data.turn;
    });

    // function showImage() {
    //   if (document.turn === "Player 1") {
    //     return '<img height=175px src="/assets/small-player1.png"/>'
    //   }
    //   else {
    //     return '<img height=175px src="/assets/small-player2.png"/>'
    //   }
    // }




    document.getElementById('cell-1').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 1, turn: document.turn});
    });


    document.getElementById('cell-2').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 2, turn: document.turn});
    });

    document.getElementById('cell-3').addEventListener('click', (event) => {

      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 3, turn: document.turn});
    });

    document.getElementById('cell-4').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 4, turn: document.turn});
    });

    document.getElementById('cell-5').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 5, turn: document.turn});
    });

    document.getElementById('cell-6').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 6, turn: document.turn});
    });

    document.getElementById('cell-7').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 7, turn: document.turn});
    });

    document.getElementById('cell-8').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 8, turn: document.turn});
    });

    document.getElementById('cell-9').addEventListener('click', (event) => {
      event.currentTarget.innerHTML = document.turn;
      nextMove(event.currentTarget);
      socket.emit('clicked', {cell: 9, turn: document.turn});
    });

</script>